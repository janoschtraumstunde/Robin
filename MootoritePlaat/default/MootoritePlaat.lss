
MootoritePlaat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000006fe  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800106  00800106  00000798  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001f3  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c27  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060b  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e5  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000328  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002bf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a6 e0       	ldi	r26, 0x06	; 6
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 32       	cpi	r26, 0x21	; 33
  94:	b1 07       	cpc	r27, r17
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ef       	ldi	r30, 0xFE	; 254
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a6 30       	cpi	r26, 0x06	; 6
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>
  ae:	0e 94 22 01 	call	0x244	; 0x244 <main>
  b2:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <set_all>:
 
/* @author Jorma 
 * Sets all motors to target PWM 
 */
void set_all(uint8_t targetPwm) 
{
  ba:	28 2f       	mov	r18, r24
	uint8_t i, notEqual;
	uint8_t target_below_min = (targetPwm < MIN_SPEED);
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	80 36       	cpi	r24, 0x60	; 96
  c0:	10 f4       	brcc	.+4      	; 0xc6 <set_all+0xc>
  c2:	41 e0       	ldi	r20, 0x01	; 1
 
	if(target_below_min) 
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	60 e5       	ldi	r22, 0x50	; 80
  cc:	73 ec       	ldi	r23, 0xC3	; 195
  ce:	25 c0       	rjmp	.+74     	; 0x11a <set_all+0x60>
	do
	{
		notEqual = 0;
		for(i=0; i < MotorCount; i++)
		{
			pwmPtr = motors[i]->pwm;
  d0:	e9 2f       	mov	r30, r25
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	e9 5f       	subi	r30, 0xF9	; 249
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	01 90       	ld	r0, Z+
  de:	f0 81       	ld	r31, Z
  e0:	e0 2d       	mov	r30, r0
  e2:	01 80       	ldd	r0, Z+1	; 0x01
  e4:	f2 81       	ldd	r31, Z+2	; 0x02
  e6:	e0 2d       	mov	r30, r0
 
			if(*pwmPtr < MIN_SPEED)
  e8:	80 81       	ld	r24, Z
  ea:	80 36       	cpi	r24, 0x60	; 96
  ec:	30 f4       	brcc	.+12     	; 0xfa <set_all+0x40>
				*pwmPtr = (target_below_min) ? 0 : MIN_SPEED;
  ee:	44 23       	and	r20, r20
  f0:	11 f4       	brne	.+4      	; 0xf6 <set_all+0x3c>
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <set_all+0x3e>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	80 83       	st	Z, r24
 
			if(*pwmPtr > targetPwm)
  fa:	80 81       	ld	r24, Z
  fc:	28 17       	cp	r18, r24
  fe:	18 f4       	brcc	.+6      	; 0x106 <set_all+0x4c>
				*pwmPtr -= 1;
 100:	80 81       	ld	r24, Z
 102:	81 50       	subi	r24, 0x01	; 1
 104:	05 c0       	rjmp	.+10     	; 0x110 <set_all+0x56>
			else if(*pwmPtr < targetPwm)
 106:	80 81       	ld	r24, Z
 108:	82 17       	cp	r24, r18
 10a:	18 f4       	brcc	.+6      	; 0x112 <set_all+0x58>
				*pwmPtr += 1;
 10c:	80 81       	ld	r24, Z
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 83       	st	Z, r24
 
			if(*pwmPtr != targetPwm)
 112:	80 81       	ld	r24, Z
 114:	82 13       	cpse	r24, r18
				++notEqual; // increase non equal counter
 116:	3f 5f       	subi	r19, 0xFF	; 255
 
	REG_PTR pwmPtr;
	do
	{
		notEqual = 0;
		for(i=0; i < MotorCount; i++)
 118:	9f 5f       	subi	r25, 0xFF	; 255
 11a:	94 30       	cpi	r25, 0x04	; 4
 11c:	c8 f2       	brcs	.-78     	; 0xd0 <set_all+0x16>
 11e:	cb 01       	movw	r24, r22
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <set_all+0x66>
 
		}
 
		_delay_ms(10);
 
	} while(notEqual);
 124:	33 23       	and	r19, r19
 126:	19 f0       	breq	.+6      	; 0x12e <set_all+0x74>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	d1 cf       	rjmp	.-94     	; 0xd0 <set_all+0x16>
 12e:	08 95       	ret

00000130 <initialize>:
 
void initialize(){

	uint8_t mode = PWM_MODE_PHASE_CORRECT;
 
	init_motors(mode, PRESCALING_OFF);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	0e 94 19 02 	call	0x432	; 0x432 <init_motors>
 
	set_output(DDRD, LED);
 138:	52 9a       	sbi	0x0a, 2	; 10
}
 13a:	08 95       	ret

0000013c <InitSPI>:
sensor pin.
*/
void InitSPI(void){

	//OUT
	set_output(DDRB, PB7); //Set SCK
 13c:	27 9a       	sbi	0x04, 7	; 4
	set_output(DDRB, PB5); //Set MOSI
 13e:	25 9a       	sbi	0x04, 5	; 4
	set_output(DDRB, PB4); //Set SS
 140:	24 9a       	sbi	0x04, 4	; 4

	//IN
	set_input(DDRB, PB6); //Set MISO
 142:	26 98       	cbi	0x04, 6	; 4
		  0:0 - f_OBC/4; 0:1 - f_OBC/16; 1:0 - f_OBC/64; 1:1 - f_OBC/128
		If SPI2X is 1:
		  0:0 - f_OBC/2; 0:1 - f_OBC/8; 1:0 - f_OBC/32; 1:1 - f_OBC/64

	*/
	SPCR = 0b11010110;
 144:	86 ed       	ldi	r24, 0xD6	; 214
 146:	8c bd       	out	0x2c, r24	; 44


	//Sensor output
	set_output(SENSOR_DDR, SENSOR_PIN);
 148:	08 9a       	sbi	0x01, 0	; 1
	//Sensor high
	set_output(SENSOR_PORT, SENSOR_PIN);
 14a:	10 9a       	sbi	0x02, 0	; 2


}
 14c:	08 95       	ret

0000014e <WriteByteSPI>:
Some functions that we may or may not need in the future...
*/

void WriteByteSPI(unsigned char byte){
		
SPDR = byte;					//Load byte to Data register
 14e:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF))); 	// Wait for transmission complete 
 150:	0d b4       	in	r0, 0x2d	; 45
 152:	07 fe       	sbrs	r0, 7
 154:	fd cf       	rjmp	.-6      	; 0x150 <WriteByteSPI+0x2>

}
 156:	08 95       	ret

00000158 <ReadByteSPI>:

char ReadByteSPI(char addr){
	SPDR = addr;					//Load byte to Data register
 158:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); 	// Wait for transmission complete 
 15a:	0d b4       	in	r0, 0x2d	; 45
 15c:	07 fe       	sbrs	r0, 7
 15e:	fd cf       	rjmp	.-6      	; 0x15a <ReadByteSPI+0x2>
	addr=SPDR;
 160:	8e b5       	in	r24, 0x2e	; 46
	return addr;
}
 162:	08 95       	ret

00000164 <spi_transmit_byte>:
 
// ==============================================================================
// Talk to MLX90316
// ------------------------------------------------------------------------------
uint8_t spi_transmit_byte(uint8_t byte) {
    SPDR = byte;
 164:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF))) {}
 166:	0d b4       	in	r0, 0x2d	; 45
 168:	07 fe       	sbrs	r0, 7
 16a:	fd cf       	rjmp	.-6      	; 0x166 <spi_transmit_byte+0x2>
    return SPDR;
 16c:	8e b5       	in	r24, 0x2e	; 46
}
 16e:	08 95       	ret

00000170 <checkSPI>:
 
void checkSPI(void) {

 
 	//If we start the buffer-cycle... index is 0
    if (rx_idx == 0) {
 170:	90 91 10 01 	lds	r25, 0x0110
 174:	99 23       	and	r25, r25
 176:	81 f4       	brne	.+32     	; 0x198 <checkSPI+0x28>

		set_input(SENSOR_PORT, SENSOR_PIN); // select angle sensor
 178:	10 98       	cbi	0x02, 0	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <checkSPI+0xc>
 
// ==============================================================================
// Talk to MLX90316
// ------------------------------------------------------------------------------
uint8_t spi_transmit_byte(uint8_t byte) {
    SPDR = byte;
 180:	8a ea       	ldi	r24, 0xAA	; 170
 182:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF))) {}
 184:	0d b4       	in	r0, 0x2d	; 45
 186:	07 fe       	sbrs	r0, 7
 188:	fd cf       	rjmp	.-6      	; 0x184 <checkSPI+0x14>
    return SPDR;
 18a:	8e b5       	in	r24, 0x2e	; 46
    if (rx_idx == 0) {

		set_input(SENSOR_PORT, SENSOR_PIN); // select angle sensor
        //PORTA &= ~(1 << 7);     
        _delay_us(6);
        rx_buffer[rx_idx] = spi_transmit_byte(0xAA);
 18c:	80 93 11 01 	sts	0x0111, r24
		

        rx_idx++;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 10 01 	sts	0x0110, r24
 196:	08 95       	ret
    } else {
		
	 
        if (rx_idx < 8) {
 198:	98 30       	cpi	r25, 0x08	; 8
 19a:	78 f4       	brcc	.+30     	; 0x1ba <checkSPI+0x4a>
 
// ==============================================================================
// Talk to MLX90316
// ------------------------------------------------------------------------------
uint8_t spi_transmit_byte(uint8_t byte) {
    SPDR = byte;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF))) {}
 1a0:	0d b4       	in	r0, 0x2d	; 45
 1a2:	07 fe       	sbrs	r0, 7
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <checkSPI+0x30>
    return SPDR;
 1a6:	8e b5       	in	r24, 0x2e	; 46
        rx_idx++;
    } else {
		
	 
        if (rx_idx < 8) {
            rx_buffer[rx_idx] = spi_transmit_byte(0xFF);
 1a8:	e9 2f       	mov	r30, r25
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ef 5e       	subi	r30, 0xEF	; 239
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	80 83       	st	Z, r24
            rx_idx++;
 1b2:	9f 5f       	subi	r25, 0xFF	; 255
 1b4:	90 93 10 01 	sts	0x0110, r25
 1b8:	08 95       	ret
			//set_input(PORTD, LED);       
			
        } else {


			set_output(SENSOR_PORT, SENSOR_PIN); // deselect angle sensor
 1ba:	10 9a       	sbi	0x02, 0	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	97 e2       	ldi	r25, 0x27	; 39
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <checkSPI+0x50>
            //PORTA |= (1 << 7);     
            _delay_ms(2);
            rx_idx = 0;
 1c4:	10 92 10 01 	sts	0x0110, r1
			
 
            if (rx_buffer[3] & 1) {     // LSB == 0 means error from MLX90316
 1c8:	80 91 14 01 	lds	r24, 0x0114
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	80 ff       	sbrs	r24, 0
 1d2:	1a c0       	rjmp	.+52     	; 0x208 <checkSPI+0x98>
				//set_input(PORTD, LED);
                uint16_t temp;
                temp = (rx_buffer[2] << 8) + rx_buffer[3];
 1d4:	90 91 13 01 	lds	r25, 0x0113
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	82 0f       	add	r24, r18
 1dc:	93 1f       	adc	r25, r19

                if (temp < 0xffff) {    // angle cannot be 0xffff
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	8f 3f       	cpi	r24, 0xFF	; 255
 1e2:	92 07       	cpc	r25, r18
 1e4:	81 f0       	breq	.+32     	; 0x206 <checkSPI+0x96>
                    angle = temp >> 2;  // bits 0..1 of data doesn't mean anything
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	90 93 1c 01 	sts	0x011C, r25
 1f2:	80 93 1b 01 	sts	0x011B, r24
					//set_output(PORTD, LED);
					if(angle > 0 && angle < 180){
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	83 3b       	cpi	r24, 0xB3	; 179
 1fa:	91 05       	cpc	r25, r1
 1fc:	10 f4       	brcc	.+4      	; 0x202 <checkSPI+0x92>
						set_output(PORTD, LED);
 1fe:	5a 9a       	sbi	0x0b, 2	; 11
 200:	08 95       	ret
					}else{
						set_input(PORTD, LED);
 202:	5a 98       	cbi	0x0b, 2	; 11
 204:	08 95       	ret
					}
                }else{
					 set_output(PORTD, LED);
 206:	5a 9a       	sbi	0x0b, 2	; 11
 208:	08 95       	ret

0000020a <blink>:
#include "Main.h"

void blink(int a){
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	64 ef       	ldi	r22, 0xF4	; 244
 210:	71 e0       	ldi	r23, 0x01	; 1
 212:	14 c0       	rjmp	.+40     	; 0x23c <blink+0x32>
	for(int i = 0; i < a; i++){
		set_output(PORTD, LED);
 214:	5a 9a       	sbi	0x0b, 2	; 11
 216:	24 ec       	ldi	r18, 0xC4	; 196
 218:	39 e0       	ldi	r19, 0x09	; 9
 21a:	fb 01       	movw	r30, r22
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <blink+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 220:	21 50       	subi	r18, 0x01	; 1
 222:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 224:	d1 f7       	brne	.-12     	; 0x21a <blink+0x10>
		_delay_ms(250);
		set_input(PORTD, LED);
 226:	5a 98       	cbi	0x0b, 2	; 11
 228:	24 ec       	ldi	r18, 0xC4	; 196
 22a:	39 e0       	ldi	r19, 0x09	; 9
 22c:	fb 01       	movw	r30, r22
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <blink+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	21 50       	subi	r18, 0x01	; 1
 234:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 236:	d1 f7       	brne	.-12     	; 0x22c <blink+0x22>
#include "Main.h"

void blink(int a){
	for(int i = 0; i < a; i++){
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	48 17       	cp	r20, r24
 23e:	59 07       	cpc	r21, r25
 240:	4c f3       	brlt	.-46     	; 0x214 <blink+0xa>
		set_output(PORTD, LED);
		_delay_ms(250);
		set_input(PORTD, LED);
		_delay_ms(250);
	}
}
 242:	08 95       	ret

00000244 <main>:


 
int main()
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	initialize();
 248:	0e 94 98 00 	call	0x130	; 0x130 <initialize>
 
	int dir = FWD;
 
	set_dir(0, dir);
 24c:	e0 91 07 01 	lds	r30, 0x0107
 250:	f0 91 08 01 	lds	r31, 0x0108
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	86 83       	std	Z+6, r24	; 0x06
 258:	87 81       	ldd	r24, Z+7	; 0x07
 25a:	a4 81       	ldd	r26, Z+4	; 0x04
 25c:	b5 81       	ldd	r27, Z+5	; 0x05
 25e:	33 81       	ldd	r19, Z+3	; 0x03
 260:	88 23       	and	r24, r24
 262:	09 f4       	brne	.+2      	; 0x266 <main+0x22>
 264:	66 c0       	rjmp	.+204    	; 0x332 <main+0xee>
 266:	2c 91       	ld	r18, X
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <main+0x2e>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	3a 95       	dec	r19
 274:	e2 f7       	brpl	.-8      	; 0x26e <main+0x2a>
 276:	28 2b       	or	r18, r24
 278:	2c 93       	st	X, r18
 27a:	2c 91       	ld	r18, X
	set_dir(1, !dir);
 27c:	e0 91 09 01 	lds	r30, 0x0109
 280:	f0 91 0a 01 	lds	r31, 0x010A
 284:	16 82       	std	Z+6, r1	; 0x06
 286:	87 81       	ldd	r24, Z+7	; 0x07
 288:	a4 81       	ldd	r26, Z+4	; 0x04
 28a:	b5 81       	ldd	r27, Z+5	; 0x05
 28c:	33 81       	ldd	r19, Z+3	; 0x03
 28e:	88 23       	and	r24, r24
 290:	09 f4       	brne	.+2      	; 0x294 <main+0x50>
 292:	5b c0       	rjmp	.+182    	; 0x34a <main+0x106>
 294:	2c 91       	ld	r18, X
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <main+0x5c>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	3a 95       	dec	r19
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <main+0x58>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	8c 93       	st	X, r24
 2aa:	2c 91       	ld	r18, X
	set_dir(2, dir);
 2ac:	e0 91 0b 01 	lds	r30, 0x010B
 2b0:	f0 91 0c 01 	lds	r31, 0x010C
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	86 83       	std	Z+6, r24	; 0x06
 2b8:	87 81       	ldd	r24, Z+7	; 0x07
 2ba:	a4 81       	ldd	r26, Z+4	; 0x04
 2bc:	b5 81       	ldd	r27, Z+5	; 0x05
 2be:	33 81       	ldd	r19, Z+3	; 0x03
 2c0:	88 23       	and	r24, r24
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0x82>
 2c4:	4d c0       	rjmp	.+154    	; 0x360 <main+0x11c>
 2c6:	2c 91       	ld	r18, X
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <main+0x8e>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	3a 95       	dec	r19
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <main+0x8a>
 2d6:	28 2b       	or	r18, r24
 2d8:	2c 93       	st	X, r18
 2da:	2c 91       	ld	r18, X
	set_dir(3, !dir);
 2dc:	e0 91 0d 01 	lds	r30, 0x010D
 2e0:	f0 91 0e 01 	lds	r31, 0x010E
 2e4:	16 82       	std	Z+6, r1	; 0x06
 2e6:	e0 91 0d 01 	lds	r30, 0x010D
 2ea:	f0 91 0e 01 	lds	r31, 0x010E
 2ee:	87 81       	ldd	r24, Z+7	; 0x07
 2f0:	a4 81       	ldd	r26, Z+4	; 0x04
 2f2:	b5 81       	ldd	r27, Z+5	; 0x05
 2f4:	33 81       	ldd	r19, Z+3	; 0x03
 2f6:	88 23       	and	r24, r24
 2f8:	09 f4       	brne	.+2      	; 0x2fc <main+0xb8>
 2fa:	3e c0       	rjmp	.+124    	; 0x378 <main+0x134>
 2fc:	2c 91       	ld	r18, X
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <main+0xc4>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	3a 95       	dec	r19
 30a:	e2 f7       	brpl	.-8      	; 0x304 <main+0xc0>
 30c:	80 95       	com	r24
 30e:	82 23       	and	r24, r18
 310:	8c 93       	st	X, r24
 312:	2c 91       	ld	r18, X

	InitSPI();
 314:	0e 94 9e 00 	call	0x13c	; 0x13c <InitSPI>
	set_input(PORTD, LED);
 318:	5a 98       	cbi	0x0b, 2	; 11
 31a:	c4 ef       	ldi	r28, 0xF4	; 244
 31c:	d1 e0       	ldi	r29, 0x01	; 1
 
	while(1)
	{
		// stop all
		checkSPI();
 31e:	0e 94 b8 00 	call	0x170	; 0x170 <checkSPI>
 322:	80 ed       	ldi	r24, 0xD0	; 208
 324:	97 e0       	ldi	r25, 0x07	; 7
 326:	fe 01       	movw	r30, r28
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32e:	d9 f7       	brne	.-10     	; 0x326 <main+0xe2>
 330:	f6 cf       	rjmp	.-20     	; 0x31e <main+0xda>
{
	initialize();
 
	int dir = FWD;
 
	set_dir(0, dir);
 332:	2c 91       	ld	r18, X
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <main+0xfa>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	3a 95       	dec	r19
 340:	e2 f7       	brpl	.-8      	; 0x33a <main+0xf6>
 342:	80 95       	com	r24
 344:	82 23       	and	r24, r18
 346:	8c 93       	st	X, r24
 348:	98 cf       	rjmp	.-208    	; 0x27a <main+0x36>
	set_dir(1, !dir);
 34a:	2c 91       	ld	r18, X
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <main+0x112>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	3a 95       	dec	r19
 358:	e2 f7       	brpl	.-8      	; 0x352 <main+0x10e>
 35a:	28 2b       	or	r18, r24
 35c:	2c 93       	st	X, r18
 35e:	a5 cf       	rjmp	.-182    	; 0x2aa <main+0x66>
	set_dir(2, dir);
 360:	2c 91       	ld	r18, X
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <main+0x128>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	3a 95       	dec	r19
 36e:	e2 f7       	brpl	.-8      	; 0x368 <main+0x124>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	8c 93       	st	X, r24
 376:	b1 cf       	rjmp	.-158    	; 0x2da <main+0x96>
	set_dir(3, !dir);
 378:	2c 91       	ld	r18, X
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <main+0x140>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	3a 95       	dec	r19
 386:	e2 f7       	brpl	.-8      	; 0x380 <main+0x13c>
 388:	28 2b       	or	r18, r24
 38a:	2c 93       	st	X, r18
 38c:	c2 cf       	rjmp	.-124    	; 0x312 <main+0xce>

0000038e <getPwmMode>:
	m->dir_port = dir_port;
	m->fwd_dir = forwardDirection;
	return m;
}

uint8_t getPwmMode()	{ return __pwm_mode; }
 38e:	80 91 06 01 	lds	r24, 0x0106
 392:	08 95       	ret

00000394 <getPrescaling>:
uint8_t getPrescaling() { return __prescaling; }
 394:	80 91 0f 01 	lds	r24, 0x010F
 398:	08 95       	ret

0000039a <pwm_mode>:


void pwm_mode(uint8_t pwm_mode, uint8_t prescaler){
 39a:	98 2f       	mov	r25, r24
		The timer settings in the Timer Counter Control Registers (TCCR)-s
		for specific PWM modes are described below:
	*/
 
	// validate pwm and prescaler
	if(1 <= pwm_mode && pwm_mode <= 2) 
 39c:	81 50       	subi	r24, 0x01	; 1
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	10 f4       	brcc	.+4      	; 0x3a6 <pwm_mode+0xc>
		__pwm_mode = pwm_mode;
 3a2:	90 93 06 01 	sts	0x0106, r25
	if(1 <= prescaler && prescaler <= 5)
 3a6:	86 2f       	mov	r24, r22
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	85 30       	cpi	r24, 0x05	; 5
 3ac:	10 f4       	brcc	.+4      	; 0x3b2 <pwm_mode+0x18>
		__prescaling = prescaler;
 3ae:	60 93 0f 01 	sts	0x010F, r22
 
	switch(__pwm_mode) 
 3b2:	80 91 06 01 	lds	r24, 0x0106
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <pwm_mode+0x26>
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	a1 f4       	brne	.+40     	; 0x3e6 <pwm_mode+0x4c>
 3be:	0a c0       	rjmp	.+20     	; 0x3d4 <pwm_mode+0x3a>
			10 - clear OC0A on compare match
			10 - clear OC0B on compare match
			00 - not used
			11 - Fast PWM mode
		*/
		TCCR0A = 0b10100011; // = 0xa3;
 3c0:	93 ea       	ldi	r25, 0xA3	; 163
 3c2:	94 bd       	out	0x24, r25	; 36
			00 - these bits must be set zero for PWM mode
			00 - not used
			0 - 0 for any simple PWM (upcounts to 0xFF)
			### - 001 = No prescaling, 010 = 8, 011 = 64, 100 = 256, 101 = 1024
		*/
		TCCR0B = __prescaling;
 3c4:	80 91 0f 01 	lds	r24, 0x010F
 3c8:	85 bd       	out	0x25, r24	; 37
 
		// similar settings as above, but:
		// clear OC2A on match, clear OC2B on match
		TCCR2A = 0b10100011;
 3ca:	90 93 b0 00 	sts	0x00B0, r25
		TCCR2B = __prescaling;
 3ce:	80 93 b1 00 	sts	0x00B1, r24
 3d2:	08 95       	ret
			10 - Clear OC0A on Compare Match when up-counting. Set OC0A on Compare Match when down-counting.
			10 - Clear OC0B on Compare Match when up-counting. Set OC0B on Compare Match when down-counting.
			00 - not used
			01 - PWM, Phase Correct
		*/
		TCCR0A = 0b10100001;
 3d4:	91 ea       	ldi	r25, 0xA1	; 161
 3d6:	94 bd       	out	0x24, r25	; 36
			00 - these bits must be set zero for PWM mode
			00 - not used
			0 - 0 for any simple PWM (upcounts to 0xFF)
			001 - No prescaling
		*/
		TCCR0B = __prescaling;
 3d8:	80 91 0f 01 	lds	r24, 0x010F
 3dc:	85 bd       	out	0x25, r24	; 37
 
		// similar settings as above, but for OC2A and OC2B
		TCCR2A = 0b10100001;
 3de:	90 93 b0 00 	sts	0x00B0, r25
		TCCR2B = __prescaling;
 3e2:	80 93 b1 00 	sts	0x00B1, r24
 3e6:	08 95       	ret

000003e8 <set_decay_mode>:
void set_decay_mode(uint8_t DECAY_MODE_){

	/*@note PORTC, pin PC7 (7) sets the
	 decay mode
	 */
	switch(DECAY_MODE_) {
 3e8:	88 23       	and	r24, r24
 3ea:	19 f0       	breq	.+6      	; 0x3f2 <set_decay_mode+0xa>
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <set_decay_mode+0x10>
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <set_decay_mode+0xe>
	case DECAY_MODE_FAST: // 0
		output_lo(&PORTC, PC7);
 3f2:	47 98       	cbi	0x08, 7	; 8
 3f4:	08 95       	ret
		break;
	case DECAY_MODE_SLOW: // 1
		output_hi(&PORTC, PC7);
 3f6:	47 9a       	sbi	0x08, 7	; 8
 3f8:	08 95       	ret

000003fa <newMotor>:
#include "motors.h"

Motor* newMotor(REG_PTR pwm, uint8_t dir_pin, REG_PTR dir_port, uint8_t forwardDirection)
{
 3fa:	cf 92       	push	r12
 3fc:	df 92       	push	r13
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	8c 01       	movw	r16, r24
 408:	d6 2e       	mov	r13, r22
 40a:	7a 01       	movw	r14, r20
 40c:	c2 2e       	mov	r12, r18
	Motor* m = (Motor*)malloc(sizeof(Motor));
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 78 02 	call	0x4f0	; 0x4f0 <malloc>
 416:	fc 01       	movw	r30, r24
	m->pwm = pwm;
 418:	12 83       	std	Z+2, r17	; 0x02
 41a:	01 83       	std	Z+1, r16	; 0x01
	m->dir_pin = dir_pin;
 41c:	d3 82       	std	Z+3, r13	; 0x03
	m->dir_port = dir_port;
 41e:	f5 82       	std	Z+5, r15	; 0x05
 420:	e4 82       	std	Z+4, r14	; 0x04
	m->fwd_dir = forwardDirection;
 422:	c7 82       	std	Z+7, r12	; 0x07
	return m;
}
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	08 95       	ret

00000432 <init_motors>:
}
 
/* Initializes the motors */


void init_motors(uint8_t PWM_MODE_, uint8_t PRESCALING_){
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17

	pwm_mode(PWM_MODE_, PRESCALING_);
 438:	0e 94 cd 01 	call	0x39a	; 0x39a <pwm_mode>
#include "motors.h"

Motor* newMotor(REG_PTR pwm, uint8_t dir_pin, REG_PTR dir_port, uint8_t forwardDirection)
{
	Motor* m = (Motor*)malloc(sizeof(Motor));
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 78 02 	call	0x4f0	; 0x4f0 <malloc>
 444:	fc 01       	movw	r30, r24
	m->pwm = pwm;
 446:	87 e4       	ldi	r24, 0x47	; 71
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	92 83       	std	Z+2, r25	; 0x02
 44c:	81 83       	std	Z+1, r24	; 0x01
	m->dir_pin = dir_pin;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	83 83       	std	Z+3, r24	; 0x03
	m->dir_port = dir_port;
 452:	02 e2       	ldi	r16, 0x22	; 34
 454:	10 e0       	ldi	r17, 0x00	; 0
 456:	15 83       	std	Z+5, r17	; 0x05
 458:	04 83       	std	Z+4, r16	; 0x04
	m->fwd_dir = forwardDirection;
 45a:	ff 24       	eor	r15, r15
 45c:	f3 94       	inc	r15
 45e:	f7 82       	std	Z+7, r15	; 0x07

void init_motors(uint8_t PWM_MODE_, uint8_t PRESCALING_){

	pwm_mode(PWM_MODE_, PRESCALING_);
 
	motors[0] =	newMotor(&OCR0A, M0_DIR, &PORTA, M0_FWD);
 460:	f0 93 08 01 	sts	0x0108, r31
 464:	e0 93 07 01 	sts	0x0107, r30
#include "motors.h"

Motor* newMotor(REG_PTR pwm, uint8_t dir_pin, REG_PTR dir_port, uint8_t forwardDirection)
{
	Motor* m = (Motor*)malloc(sizeof(Motor));
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <malloc>
 470:	fc 01       	movw	r30, r24
	m->pwm = pwm;
 472:	88 e4       	ldi	r24, 0x48	; 72
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	92 83       	std	Z+2, r25	; 0x02
 478:	81 83       	std	Z+1, r24	; 0x01
	m->dir_pin = dir_pin;
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	83 83       	std	Z+3, r24	; 0x03
	m->dir_port = dir_port;
 47e:	15 83       	std	Z+5, r17	; 0x05
 480:	04 83       	std	Z+4, r16	; 0x04
	m->fwd_dir = forwardDirection;
 482:	f7 82       	std	Z+7, r15	; 0x07
void init_motors(uint8_t PWM_MODE_, uint8_t PRESCALING_){

	pwm_mode(PWM_MODE_, PRESCALING_);
 
	motors[0] =	newMotor(&OCR0A, M0_DIR, &PORTA, M0_FWD);
	motors[1] =	newMotor(&OCR0B, M1_DIR, &PORTA, M1_FWD);
 484:	f0 93 0a 01 	sts	0x010A, r31
 488:	e0 93 09 01 	sts	0x0109, r30
#include "motors.h"

Motor* newMotor(REG_PTR pwm, uint8_t dir_pin, REG_PTR dir_port, uint8_t forwardDirection)
{
	Motor* m = (Motor*)malloc(sizeof(Motor));
 48c:	88 e0       	ldi	r24, 0x08	; 8
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 78 02 	call	0x4f0	; 0x4f0 <malloc>
 494:	fc 01       	movw	r30, r24
	m->pwm = pwm;
 496:	83 eb       	ldi	r24, 0xB3	; 179
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	92 83       	std	Z+2, r25	; 0x02
 49c:	81 83       	std	Z+1, r24	; 0x01
	m->dir_pin = dir_pin;
 49e:	85 e0       	ldi	r24, 0x05	; 5
 4a0:	83 83       	std	Z+3, r24	; 0x03
	m->dir_port = dir_port;
 4a2:	08 e2       	ldi	r16, 0x28	; 40
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	15 83       	std	Z+5, r17	; 0x05
 4a8:	04 83       	std	Z+4, r16	; 0x04
	m->fwd_dir = forwardDirection;
 4aa:	f7 82       	std	Z+7, r15	; 0x07

	pwm_mode(PWM_MODE_, PRESCALING_);
 
	motors[0] =	newMotor(&OCR0A, M0_DIR, &PORTA, M0_FWD);
	motors[1] =	newMotor(&OCR0B, M1_DIR, &PORTA, M1_FWD);
	motors[2] =	newMotor(&OCR2A, M2_DIR, &PORTC, M2_FWD);
 4ac:	f0 93 0c 01 	sts	0x010C, r31
 4b0:	e0 93 0b 01 	sts	0x010B, r30
#include "motors.h"

Motor* newMotor(REG_PTR pwm, uint8_t dir_pin, REG_PTR dir_port, uint8_t forwardDirection)
{
	Motor* m = (Motor*)malloc(sizeof(Motor));
 4b4:	88 e0       	ldi	r24, 0x08	; 8
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <malloc>
 4bc:	fc 01       	movw	r30, r24
	m->pwm = pwm;
 4be:	84 eb       	ldi	r24, 0xB4	; 180
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	92 83       	std	Z+2, r25	; 0x02
 4c4:	81 83       	std	Z+1, r24	; 0x01
	m->dir_pin = dir_pin;
 4c6:	84 e0       	ldi	r24, 0x04	; 4
 4c8:	83 83       	std	Z+3, r24	; 0x03
	m->dir_port = dir_port;
 4ca:	15 83       	std	Z+5, r17	; 0x05
 4cc:	04 83       	std	Z+4, r16	; 0x04
	m->fwd_dir = forwardDirection;
 4ce:	f7 82       	std	Z+7, r15	; 0x07
	pwm_mode(PWM_MODE_, PRESCALING_);
 
	motors[0] =	newMotor(&OCR0A, M0_DIR, &PORTA, M0_FWD);
	motors[1] =	newMotor(&OCR0B, M1_DIR, &PORTA, M1_FWD);
	motors[2] =	newMotor(&OCR2A, M2_DIR, &PORTC, M2_FWD);
	motors[3] =	newMotor(&OCR2B, M3_DIR, &PORTC, M3_FWD);
 4d0:	f0 93 0e 01 	sts	0x010E, r31
 4d4:	e0 93 0d 01 	sts	0x010D, r30
 
	// Set port pins to 'output' mode (1)
	output_hi(&DDRA, M0_DIR); //PA2
 4d8:	0a 9a       	sbi	0x01, 2	; 1
    output_hi(&DDRB, M0_PWM); //PB3 -> OC0A
 4da:	23 9a       	sbi	0x04, 3	; 4
    output_hi(&DDRA, M1_DIR); //PA3
 4dc:	0b 9a       	sbi	0x01, 3	; 1
    output_hi(&DDRB, M1_PWM); //PB4 -> OC0B
 4de:	24 9a       	sbi	0x04, 4	; 4
    output_hi(&DDRC, M2_DIR); //PC5 
 4e0:	3d 9a       	sbi	0x07, 5	; 7
    output_hi(&DDRD, M2_PWM); //PD7 -> OC2A
 4e2:	57 9a       	sbi	0x0a, 7	; 10
	output_hi(&DDRC, M3_DIR); //PC4 
 4e4:	3c 9a       	sbi	0x07, 4	; 7
	output_hi(&DDRD, M3_PWM); //PD6 -> OC2B
 4e6:	56 9a       	sbi	0x0a, 6	; 10
}
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	08 95       	ret

000004f0 <malloc>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	bc 01       	movw	r22, r24
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	91 05       	cpc	r25, r1
 4fa:	10 f4       	brcc	.+4      	; 0x500 <malloc+0x10>
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	a0 91 1f 01 	lds	r26, 0x011F
 504:	b0 91 20 01 	lds	r27, 0x0120
 508:	ed 01       	movw	r28, r26
 50a:	e0 e0       	ldi	r30, 0x00	; 0
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	21 c0       	rjmp	.+66     	; 0x556 <malloc+0x66>
 514:	88 81       	ld	r24, Y
 516:	99 81       	ldd	r25, Y+1	; 0x01
 518:	86 17       	cp	r24, r22
 51a:	97 07       	cpc	r25, r23
 51c:	69 f4       	brne	.+26     	; 0x538 <malloc+0x48>
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	9b 81       	ldd	r25, Y+3	; 0x03
 522:	30 97       	sbiw	r30, 0x00	; 0
 524:	19 f0       	breq	.+6      	; 0x52c <malloc+0x3c>
 526:	93 83       	std	Z+3, r25	; 0x03
 528:	82 83       	std	Z+2, r24	; 0x02
 52a:	04 c0       	rjmp	.+8      	; 0x534 <malloc+0x44>
 52c:	90 93 20 01 	sts	0x0120, r25
 530:	80 93 1f 01 	sts	0x011F, r24
 534:	fe 01       	movw	r30, r28
 536:	34 c0       	rjmp	.+104    	; 0x5a0 <malloc+0xb0>
 538:	68 17       	cp	r22, r24
 53a:	79 07       	cpc	r23, r25
 53c:	38 f4       	brcc	.+14     	; 0x54c <malloc+0x5c>
 53e:	41 15       	cp	r20, r1
 540:	51 05       	cpc	r21, r1
 542:	19 f0       	breq	.+6      	; 0x54a <malloc+0x5a>
 544:	84 17       	cp	r24, r20
 546:	95 07       	cpc	r25, r21
 548:	08 f4       	brcc	.+2      	; 0x54c <malloc+0x5c>
 54a:	ac 01       	movw	r20, r24
 54c:	fe 01       	movw	r30, r28
 54e:	8a 81       	ldd	r24, Y+2	; 0x02
 550:	9b 81       	ldd	r25, Y+3	; 0x03
 552:	9c 01       	movw	r18, r24
 554:	e9 01       	movw	r28, r18
 556:	20 97       	sbiw	r28, 0x00	; 0
 558:	e9 f6       	brne	.-70     	; 0x514 <malloc+0x24>
 55a:	41 15       	cp	r20, r1
 55c:	51 05       	cpc	r21, r1
 55e:	a9 f1       	breq	.+106    	; 0x5ca <malloc+0xda>
 560:	ca 01       	movw	r24, r20
 562:	86 1b       	sub	r24, r22
 564:	97 0b       	sbc	r25, r23
 566:	04 97       	sbiw	r24, 0x04	; 4
 568:	08 f4       	brcc	.+2      	; 0x56c <malloc+0x7c>
 56a:	ba 01       	movw	r22, r20
 56c:	e0 e0       	ldi	r30, 0x00	; 0
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	2a c0       	rjmp	.+84     	; 0x5c6 <malloc+0xd6>
 572:	8d 91       	ld	r24, X+
 574:	9c 91       	ld	r25, X
 576:	11 97       	sbiw	r26, 0x01	; 1
 578:	84 17       	cp	r24, r20
 57a:	95 07       	cpc	r25, r21
 57c:	f9 f4       	brne	.+62     	; 0x5bc <malloc+0xcc>
 57e:	64 17       	cp	r22, r20
 580:	75 07       	cpc	r23, r21
 582:	81 f4       	brne	.+32     	; 0x5a4 <malloc+0xb4>
 584:	12 96       	adiw	r26, 0x02	; 2
 586:	8d 91       	ld	r24, X+
 588:	9c 91       	ld	r25, X
 58a:	13 97       	sbiw	r26, 0x03	; 3
 58c:	30 97       	sbiw	r30, 0x00	; 0
 58e:	19 f0       	breq	.+6      	; 0x596 <malloc+0xa6>
 590:	93 83       	std	Z+3, r25	; 0x03
 592:	82 83       	std	Z+2, r24	; 0x02
 594:	04 c0       	rjmp	.+8      	; 0x59e <malloc+0xae>
 596:	90 93 20 01 	sts	0x0120, r25
 59a:	80 93 1f 01 	sts	0x011F, r24
 59e:	fd 01       	movw	r30, r26
 5a0:	32 96       	adiw	r30, 0x02	; 2
 5a2:	4f c0       	rjmp	.+158    	; 0x642 <malloc+0x152>
 5a4:	ca 01       	movw	r24, r20
 5a6:	86 1b       	sub	r24, r22
 5a8:	97 0b       	sbc	r25, r23
 5aa:	fd 01       	movw	r30, r26
 5ac:	e8 0f       	add	r30, r24
 5ae:	f9 1f       	adc	r31, r25
 5b0:	61 93       	st	Z+, r22
 5b2:	71 93       	st	Z+, r23
 5b4:	02 97       	sbiw	r24, 0x02	; 2
 5b6:	8d 93       	st	X+, r24
 5b8:	9c 93       	st	X, r25
 5ba:	43 c0       	rjmp	.+134    	; 0x642 <malloc+0x152>
 5bc:	fd 01       	movw	r30, r26
 5be:	82 81       	ldd	r24, Z+2	; 0x02
 5c0:	93 81       	ldd	r25, Z+3	; 0x03
 5c2:	9c 01       	movw	r18, r24
 5c4:	d9 01       	movw	r26, r18
 5c6:	10 97       	sbiw	r26, 0x00	; 0
 5c8:	a1 f6       	brne	.-88     	; 0x572 <malloc+0x82>
 5ca:	80 91 1d 01 	lds	r24, 0x011D
 5ce:	90 91 1e 01 	lds	r25, 0x011E
 5d2:	89 2b       	or	r24, r25
 5d4:	41 f4       	brne	.+16     	; 0x5e6 <malloc+0xf6>
 5d6:	80 91 02 01 	lds	r24, 0x0102
 5da:	90 91 03 01 	lds	r25, 0x0103
 5de:	90 93 1e 01 	sts	0x011E, r25
 5e2:	80 93 1d 01 	sts	0x011D, r24
 5e6:	40 91 04 01 	lds	r20, 0x0104
 5ea:	50 91 05 01 	lds	r21, 0x0105
 5ee:	41 15       	cp	r20, r1
 5f0:	51 05       	cpc	r21, r1
 5f2:	41 f4       	brne	.+16     	; 0x604 <malloc+0x114>
 5f4:	4d b7       	in	r20, 0x3d	; 61
 5f6:	5e b7       	in	r21, 0x3e	; 62
 5f8:	80 91 00 01 	lds	r24, 0x0100
 5fc:	90 91 01 01 	lds	r25, 0x0101
 600:	48 1b       	sub	r20, r24
 602:	59 0b       	sbc	r21, r25
 604:	20 91 1d 01 	lds	r18, 0x011D
 608:	30 91 1e 01 	lds	r19, 0x011E
 60c:	24 17       	cp	r18, r20
 60e:	35 07       	cpc	r19, r21
 610:	b0 f4       	brcc	.+44     	; 0x63e <malloc+0x14e>
 612:	ca 01       	movw	r24, r20
 614:	82 1b       	sub	r24, r18
 616:	93 0b       	sbc	r25, r19
 618:	86 17       	cp	r24, r22
 61a:	97 07       	cpc	r25, r23
 61c:	80 f0       	brcs	.+32     	; 0x63e <malloc+0x14e>
 61e:	ab 01       	movw	r20, r22
 620:	4e 5f       	subi	r20, 0xFE	; 254
 622:	5f 4f       	sbci	r21, 0xFF	; 255
 624:	84 17       	cp	r24, r20
 626:	95 07       	cpc	r25, r21
 628:	50 f0       	brcs	.+20     	; 0x63e <malloc+0x14e>
 62a:	42 0f       	add	r20, r18
 62c:	53 1f       	adc	r21, r19
 62e:	50 93 1e 01 	sts	0x011E, r21
 632:	40 93 1d 01 	sts	0x011D, r20
 636:	f9 01       	movw	r30, r18
 638:	61 93       	st	Z+, r22
 63a:	71 93       	st	Z+, r23
 63c:	02 c0       	rjmp	.+4      	; 0x642 <malloc+0x152>
 63e:	e0 e0       	ldi	r30, 0x00	; 0
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	cf 01       	movw	r24, r30
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <free>:
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	09 f4       	brne	.+2      	; 0x654 <free+0xa>
 652:	50 c0       	rjmp	.+160    	; 0x6f4 <free+0xaa>
 654:	ec 01       	movw	r28, r24
 656:	22 97       	sbiw	r28, 0x02	; 2
 658:	1b 82       	std	Y+3, r1	; 0x03
 65a:	1a 82       	std	Y+2, r1	; 0x02
 65c:	a0 91 1f 01 	lds	r26, 0x011F
 660:	b0 91 20 01 	lds	r27, 0x0120
 664:	10 97       	sbiw	r26, 0x00	; 0
 666:	09 f1       	breq	.+66     	; 0x6aa <free+0x60>
 668:	40 e0       	ldi	r20, 0x00	; 0
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	ac 17       	cp	r26, r28
 66e:	bd 07       	cpc	r27, r29
 670:	08 f1       	brcs	.+66     	; 0x6b4 <free+0x6a>
 672:	bb 83       	std	Y+3, r27	; 0x03
 674:	aa 83       	std	Y+2, r26	; 0x02
 676:	fe 01       	movw	r30, r28
 678:	21 91       	ld	r18, Z+
 67a:	31 91       	ld	r19, Z+
 67c:	e2 0f       	add	r30, r18
 67e:	f3 1f       	adc	r31, r19
 680:	ae 17       	cp	r26, r30
 682:	bf 07       	cpc	r27, r31
 684:	79 f4       	brne	.+30     	; 0x6a4 <free+0x5a>
 686:	8d 91       	ld	r24, X+
 688:	9c 91       	ld	r25, X
 68a:	11 97       	sbiw	r26, 0x01	; 1
 68c:	28 0f       	add	r18, r24
 68e:	39 1f       	adc	r19, r25
 690:	2e 5f       	subi	r18, 0xFE	; 254
 692:	3f 4f       	sbci	r19, 0xFF	; 255
 694:	39 83       	std	Y+1, r19	; 0x01
 696:	28 83       	st	Y, r18
 698:	12 96       	adiw	r26, 0x02	; 2
 69a:	8d 91       	ld	r24, X+
 69c:	9c 91       	ld	r25, X
 69e:	13 97       	sbiw	r26, 0x03	; 3
 6a0:	9b 83       	std	Y+3, r25	; 0x03
 6a2:	8a 83       	std	Y+2, r24	; 0x02
 6a4:	41 15       	cp	r20, r1
 6a6:	51 05       	cpc	r21, r1
 6a8:	71 f4       	brne	.+28     	; 0x6c6 <free+0x7c>
 6aa:	d0 93 20 01 	sts	0x0120, r29
 6ae:	c0 93 1f 01 	sts	0x011F, r28
 6b2:	20 c0       	rjmp	.+64     	; 0x6f4 <free+0xaa>
 6b4:	12 96       	adiw	r26, 0x02	; 2
 6b6:	8d 91       	ld	r24, X+
 6b8:	9c 91       	ld	r25, X
 6ba:	13 97       	sbiw	r26, 0x03	; 3
 6bc:	ad 01       	movw	r20, r26
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <free+0x7c>
 6c2:	dc 01       	movw	r26, r24
 6c4:	d3 cf       	rjmp	.-90     	; 0x66c <free+0x22>
 6c6:	fa 01       	movw	r30, r20
 6c8:	d3 83       	std	Z+3, r29	; 0x03
 6ca:	c2 83       	std	Z+2, r28	; 0x02
 6cc:	21 91       	ld	r18, Z+
 6ce:	31 91       	ld	r19, Z+
 6d0:	e2 0f       	add	r30, r18
 6d2:	f3 1f       	adc	r31, r19
 6d4:	ce 17       	cp	r28, r30
 6d6:	df 07       	cpc	r29, r31
 6d8:	69 f4       	brne	.+26     	; 0x6f4 <free+0xaa>
 6da:	88 81       	ld	r24, Y
 6dc:	99 81       	ldd	r25, Y+1	; 0x01
 6de:	28 0f       	add	r18, r24
 6e0:	39 1f       	adc	r19, r25
 6e2:	2e 5f       	subi	r18, 0xFE	; 254
 6e4:	3f 4f       	sbci	r19, 0xFF	; 255
 6e6:	fa 01       	movw	r30, r20
 6e8:	31 83       	std	Z+1, r19	; 0x01
 6ea:	20 83       	st	Z, r18
 6ec:	8a 81       	ldd	r24, Y+2	; 0x02
 6ee:	9b 81       	ldd	r25, Y+3	; 0x03
 6f0:	93 83       	std	Z+3, r25	; 0x03
 6f2:	82 83       	std	Z+2, r24	; 0x02
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>
